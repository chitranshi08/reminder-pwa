{"version":3,"sources":["logo.svg","CreateReminder.js","Reminder.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["CreateReminder","props","handleReminderHeading","e","setState","reminderHeading","target","value","handleReminderContent","reminderContent","handleCheckButton","state","dateContainerVisible","handleTime","reminderTime","handleDate","reminderDate","hideDateModal","saveReminder","reminder","addToReminder","hideAddReminder","class","placeholder","onInput","this","type","onClick","onChange","React","Component","Reminder","heading","content","date","time","App","handleAddReminder","createReminderVisible","reminders","push","window","localStorage","setItem","JSON","stringify","parse","getItem","map","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.5b3e470d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nclass CreateReminder extends React.Component{\r\nconstructor(props){\r\n\tsuper(props)\r\n\tthis.state={\r\n\t\treminderHeading:\"\",\r\n\t\treminderContent:\"\",\r\n\t\treminderDate:\"\",\r\n\t\treminderTime:\"\",\r\n\t\tdateContainerVisible:false\r\n\t}\r\n}\r\nhandleReminderHeading=(e)=>{\r\nthis.setState({\r\n\treminderHeading:e.target.value\r\n})\r\n}\r\nhandleReminderContent=(e)=>{\r\n\tthis.setState({\r\n\t\treminderContent:e.target.value\r\n\t})\r\n}\r\nhandleCheckButton=()=>{\r\n\tif(this.state.reminderHeading){\r\n\tthis.setState({\r\n\t\tdateContainerVisible:true\r\n\t})\t\r\n\t}\r\n}\r\nhandleTime=(e)=>{\r\n\tthis.setState({\r\n\t\treminderTime:e.target.value\r\n\t})\r\n}\r\nhandleDate=(e)=>{\r\n\tthis.setState({\r\n\t\treminderDate:e.target.value\r\n\t})\r\n}\r\nhideDateModal=()=>{\r\n\tthis.setState({\r\n\t\tdateContainerVisible:false\r\n\t})\r\n}\r\nsaveReminder=()=>{\r\n\tconst reminder ={\r\n\t\t\"heading\":this.state.reminderHeading,\r\n\t\t\"content\":this.state.reminderContent,\r\n\t\t\"date\":this.state.reminderDate,\r\n\t\t\"time\":this.state.reminderTime\r\n\t}\r\n\tthis.props.addToReminder(reminder)\r\n\tthis.props.hideAddReminder()\r\n\r\n\t\r\n}\r\n\r\n  render(){\r\n    return(\r\n    \t<div>\r\n     <div class=\"inputContainer\"> <input placeholder=\"Reminder Heading\" onInput={this.handleReminderHeading} type=\"text\"/>\r\n      <div>\r\n      \t<textarea placeholder=\"Reminder Text\" onInput={this.handleReminderContent}></textarea>\r\n      </div>\r\n      </div>\r\n      <div class=\"plusButton\" onClick={this.handleCheckButton}>&#10003;</div>\r\n      \r\n     { this.state.dateContainerVisible && <div class=\"modalBackground\">\r\n      \t<div class=\"dateContainer\">\r\n      \t<h3>When to remind?</h3>\r\n      \t<div><input onChange={this.handleDate} type=\"date\"/></div>\r\n      \t<div><input onChange={this.handleTime} type=\"time\"/></div>\r\n      \t<div class=\"buttonContainer\">\r\n      \t\t<button onClick={this.hideDateModal}>Cancel</button>\r\n      \t\t<button onClick={this.saveReminder}>Save</button>\r\n      \t</div>\r\n\r\n      \t</div>\r\n      </div>}\r\n      </div>\r\n      )\r\n  }\r\n}\r\n\r\nexport default CreateReminder;","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nclass Reminder extends React.Component{\r\n  constructor(props){\r\n    super(props)\r\n  }\r\n  render(){\r\n    return(\r\n      <div class=\"reminder\">\r\n      <h3>{this.props.reminder.heading}</h3>\r\n      <div>{this.props.reminder.content}</div>\r\n      <div>{this.props.reminder.date}</div>\r\n       <div>{this.props.reminder.time}</div>\r\n\r\n      </div>\r\n      )\r\n  }\r\n}\r\n\r\nexport default Reminder;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport CreateReminder from \"./CreateReminder\"\nimport Reminder from \"./Reminder\"\n\nclass App extends React.Component{\n  constructor(){\n    super()\n    this.state={\n      createReminderVisible:false,\n      reminders:JSON.parse(window.localStorage.getItem(\"reminders\")) || []\n    }\n  }\n  handleAddReminder=()=>{\n    this.setState({\n      createReminderVisible:true\n    })\n  }\n  addToReminder=(reminder)=>{\n    let reminders = this.state.reminders\n    reminders.push(reminder)\n    this.setState({\n      reminders:reminders\n    })\n    window.localStorage.setItem(\"reminders\",JSON.stringify(reminders))\n  }\n  hideAddReminder=()=>{\n    this.setState({\n      createReminderVisible:false\n    })\n\n  }\n  render(){\n    return(\n      <div>\n      <div class=\"reminderContainer\">{this.state.reminders.map((reminder)=>(<Reminder reminder={reminder}/>))}</div>\n     { this.state.createReminderVisible && <CreateReminder addToReminder={this.addToReminder} hideAddReminder={this.hideAddReminder}/>}\n      {!this.state.createReminderVisible && <div class=\"plusButton\" onClick={this.handleAddReminder}>+</div>}\n\n      </div>\n      )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}